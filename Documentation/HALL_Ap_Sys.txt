=============================================================================
List of generated methods in project: HALL_Ap_Sys

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.
   - clockMan1_CLOCK_DRV_SetModuleClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source.
   - clockMan1_CLOCK_DRV_SetClockSource -This function configures a clock source.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "lpit1"     (component lpit)
   - lpit1_LPIT_DRV_GetDefaultConfig -Gets default LPIT module configuration structure
   - lpit1_LPIT_DRV_GetDefaultChanConfig -Gets default timer channel configuration structure
   - lpit1_LPIT_DRV_Init -Initializes the LPIT module.
   - lpit1_LPIT_DRV_Deinit -De-initializes LPIT module.
   - lpit1_LPIT_DRV_InitChannel -Initializes the LPIT channel.
   - lpit1_LPIT_DRV_StartTimerChannels -Starts the timer channel counting.
   - lpit1_LPIT_DRV_StopTimerChannels -Stops the timer channel counting.
   - lpit1_LPIT_DRV_SetTimerPeriodByUs -Sets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByUs -Sets the timer channel period in microseconds when the timer channel mode 
                is dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByUs -Gets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_GetCurrentTimerUs -Gets the current timer channel counting value in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodByCount -Sets the timer channel period in count unit.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByCount -Sets the timer channel period in count when the timer channel mode is 
                dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByCount -Gets the current timer channel period in count unit.
   - lpit1_LPIT_DRV_GetCurrentTimerCount -Gets the current timer channel counting value in count.
   - lpit1_LPIT_DRV_EnableTimerChannelInterrupt -Enables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_DisableTimerChannelInterrupt -Disables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_GetInterruptFlagTimerChannels -Gets the current interrupt flag of timer channels.
   - lpit1_LPIT_DRV_ClearInterruptFlagTimerChannels -Clears the interrupt flag of timer channels.

Module "lpspiCom1" (component lpspi)
   - lpspiCom1_LPSPI_DRV_MasterGetDefaultConfig -Return default configuration for SPI master.
   - lpspiCom1_LPSPI_DRV_MasterInit -Initializes a LPSPI instance for interrupt driven master mode operation.
   - lpspiCom1_LPSPI_DRV_MasterDeinit -Shuts down a LPSPI instance.
   - lpspiCom1_LPSPI_DRV_MasterSetDelay -Configures the LPSPI master mode bus timing delay options.
   - lpspiCom1_LPSPI_DRV_MasterConfigureBus -Configures the LPSPI port physical parameters to access a device on the bus when 
                the LSPI instance is configured for interrupt operation.
   - lpspiCom1_LPSPI_DRV_SetPcs -Select the chip to communicate with.
   - lpspiCom1_LPSPI_DRV_MasterTransferBlocking -Performs an interrupt driven blocking SPI master mode transfer.
   - lpspiCom1_LPSPI_DRV_MasterTransfer -Performs an interrupt driven non-blocking SPI master mode transfer.
   - lpspiCom1_LPSPI_DRV_MasterGetTransferStatus -Returns whether the previous interrupt driven transfer is completed.
   - lpspiCom1_LPSPI_DRV_MasterAbortTransfer -Terminates an interrupt driven asynchronous transfer early.
   - lpspiCom1_LPSPI_DRV_SlaveGetDefaultConfig -Return default configuration for SPI master.
   - lpspiCom1_LPSPI_DRV_SlaveInit -Initializes a LPSPI instance for interrupt driven slave mode operation.
   - lpspiCom1_LPSPI_DRV_SlaveDeinit -Shuts down an LPSPI instance interrupt mechanism.
   - lpspiCom1_LPSPI_DRV_SlaveTransferBlocking -Transfers data on LPSPI bus using a blocking call.
   - lpspiCom1_LPSPI_DRV_SlaveTransfer -Starts the transfer data on LPSPI bus using a non-blocking call.
   - lpspiCom1_LPSPI_DRV_SlaveAbortTransfer -Aborts the transfer that started by a non-blocking call transfer function.
   - lpspiCom1_LPSPI_DRV_SlaveGetTransferStatus -Returns whether the previous transfer is finished.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "adConv1"   (component adc)
   - adConv1_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv1_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv1_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv1_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv1_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv1_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv1_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv1_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv1_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv1_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv1_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv1_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv1_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv1_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv1_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv1_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv1_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv1_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv1_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv1_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv1_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv1_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv1_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "pdly1"     (component pdb)
   - pdly1_PDB_DRV_Init -Initializes the PDB counter and triggers input
   - pdly1_PDB_DRV_Deinit -De-initializes the PDB module
   - pdly1_PDB_DRV_GetDefaultConfig -Gets the default configuration structure of PDB with default settings
   - pdly1_PDB_DRV_Enable -Enables the PDB module
   - pdly1_PDB_DRV_Disable -Disables the PDB module
   - pdly1_PDB_DRV_SoftTriggerCmd -Triggers the PDB with a software trigger
   - pdly1_PDB_DRV_GetTimerValue -Gets the current counter value in the PDB module
   - pdly1_PDB_DRV_GetTimerIntFlag -Gets the PDB interrupt flag
   - pdly1_PDB_DRV_ClearTimerIntFlag -Clears the interrupt flag
   - pdly1_PDB_DRV_LoadValuesCmd -Executes the command of loading values
   - pdly1_PDB_DRV_SetTimerModulusValue -Sets the value of timer modulus
   - pdly1_PDB_DRV_SetValueForTimerInterrupt -Sets the value for the timer interrupt
   - pdly1_PDB_DRV_ConfigAdcPreTrigger -Configures the ADC pre_trigger in the PDB module
   - pdly1_PDB_DRV_GetAdcPreTriggerFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_ClearAdcPreTriggerFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_GetAdcPreTriggerSeqErrFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_ClearAdcPreTriggerSeqErrFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_SetAdcPreTriggerDelayValue -Sets the ADC pre_trigger delay value in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutEnable -Switches on/off the CMP pulse out in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutDelayForHigh -Sets the CMP pulse out delay value for high in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutDelayForLow -Sets the CMP pulse out delay value for low in the PDB module

Module "trgmux1"   (component trgmux)
   - trgmux1_TRGMUX_DRV_Init -Initialize a TRGMUX instance for operation
   - trgmux1_TRGMUX_DRV_Deinit -Reset to default values the source triggers corresponding to all target modules,
   - trgmux1_TRGMUX_DRV_SetTrigSourceForTargetModule -Configure a source trigger for a selected target module
   - trgmux1_TRGMUX_DRV_GetTrigSourceForTargetModule -Get the source trigger configured for a target module
   - trgmux1_TRGMUX_DRV_SetLockForTargetModule -Locks the TRGMUX register of a target module
   - trgmux1_TRGMUX_DRV_GetLockForTargetModule -Get the Lock bit status of the TRGMUX register of a target module
   - trgmux1_TRGMUX_DRV_GenSWTrigger -Generate software trigger

Module "lpi2c1"    (component lpi2c)
   - lpi2c1_LPI2C_DRV_MasterInit -Initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterDeinit -De-initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - lpi2c1_LPI2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterGetDefaultConfig -Gets the default configuration structure for master.
   - lpi2c1_LPI2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterGetTransferStatus -Return the current status of the I2C master transfer.
   - lpi2c1_LPI2C_DRV_MasterIRQHandler -Handle master operation when I2C interrupt occurs.
   - lpi2c1_LPI2C_DRV_SlaveInit -Initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveDeinit -De-initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveSetTxBuffer -Provide a buffer for transmitting data.
   - lpi2c1_LPI2C_DRV_SlaveSetRxBuffer -Provide a buffer for receiving data.
   - lpi2c1_LPI2C_DRV_SlaveSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveGetTransferStatus -Return the current status of the I2C slave transfer.
   - lpi2c1_LPI2C_DRV_SlaveAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_SlaveGetDefaultConfig -Gets the default configuration structure for slave
   - lpi2c1_LPI2C_DRV_SlaveIRQHandler -Handle slave operation when I2C interrupt occurs.

Module "canCom1"   (component flexcan)
   - canCom1_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom1_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom1_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom1_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom1_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom1_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom1_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom1_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom1_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom1_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom1_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom1_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance
   - canCom1_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.
   - canCom1_FLEXCAN_DRV_GetWMB -Extracts one of the frames which triggered the wake up event.
   - canCom1_FLEXCAN_DRV_SetBitrateCbt -Sets the FlexCAN bit rate for FD BRS.
   - canCom1_FLEXCAN_DRV_GetBitrateFD -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetTDCOffset -Enables/Disables the Transceiver Delay Compensation feature and sets the Transceiver 
                Delay Compensation Offset.
   - canCom1_FLEXCAN_DRV_GetTDCValue -Gets the value of the Transceiver Delay Compensation.
   - canCom1_FLEXCAN_DRV_GetTDCFail -Gets the value of the TDC Fail flag.
   - canCom1_FLEXCAN_DRV_ClearTDCFail -Clears the TDC Fail flag.

Module "comparator1" (component cmp)
   - comparator1_CMP_DRV_Reset -Reset all registers.
   - comparator1_CMP_DRV_GetInitConfigAll -Get reset configuration for all registers.
   - comparator1_CMP_DRV_Init -Configure all comparator features with the given configuration structure.
   - comparator1_CMP_DRV_GetConfigAll -Gets the current comparator configuration.
   - comparator1_CMP_DRV_GetDefaultConfig -Gets a default comparator configuration.
   - comparator1_CMP_DRV_GetInitConfigDAC -Get reset configuration for registers related with DAC.
   - comparator1_CMP_DRV_ConfigDAC -Configure only the DAC component.
   - comparator1_CMP_DRV_GetDACConfig -Return current configuration for DAC.
   - comparator1_CMP_DRV_GetInitConfigMUX -Get reset configuration for registers related with MUX.
   - comparator1_CMP_DRV_ConfigMUX -Configure only the MUX component.
   - comparator1_CMP_DRV_GetMUXConfig -Return configuration only for the MUX component.
   - comparator1_CMP_DRV_GetInitTriggerMode -Get reset configuration for registers related with Trigger Mode.
   - comparator1_CMP_DRV_ConfigTriggerMode -Configure trigger mode.
   - comparator1_CMP_DRV_GetTriggerModeConfig -Get current trigger mode configuration.
   - comparator1_CMP_DRV_GetOutputFlags -Get comparator output flags.
   - comparator1_CMP_DRV_ClearOutputFlags -Clear comparator output flags.
   - comparator1_CMP_DRV_GetInputFlags -Gets input channels change flags.
   - comparator1_CMP_DRV_ClearInputFlags -Clear comparator input channels flags.
   - comparator1_CMP_DRV_GetInitConfigComparator -Get reset configuration for registers related with comparator features.
   - comparator1_CMP_DRV_ConfigComparator -Configure only comparator features.
   - comparator1_CMP_DRV_GetComparatorConfig -Return configuration for comparator from CMP module.

Module "flexTimer_ic1" (component ftm_ic)
   - flexTimer_ic1_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_ic1_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_ic1_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_ic1_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get this 
                value after an overflow event.
   - flexTimer_ic1_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_ic1_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_ic1_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_ic1_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_ic1_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_ic1_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_ic1_FTM_DRV_InitInputCapture -Configures Channel Input Capture for either getting time-stamps on edge detection 
                or on signal measurement . When the edge specified in the captureMode argument occurs on the channel the FTM 
                counter is captured into the CnV register. The user will have to read the CnV register separately to get this 
                value. The filter function is disabled if the filterVal argument passed in is 0. The filter function is 
                available only on channels 0,1,2,3.
   - flexTimer_ic1_FTM_DRV_DeinitInputCapture -Disables input capture mode and clears FTM timer configuration.
   - flexTimer_ic1_FTM_DRV_GetInputCaptureMeasurement -This function is used to calculate the measurement and/or time stamps 
                values which are read from the C(n, n+1)V registers and stored to the static buffers.
   - flexTimer_ic1_FTM_DRV_StartNewSignalMeasurement -Starts new single-shot signal measurement of the given channel.
   - flexTimer_ic1_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_ic1_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "flexTimer_ic2" (component ftm_ic)
   - flexTimer_ic2_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_ic2_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_ic2_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_ic2_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get this 
                value after an overflow event.
   - flexTimer_ic2_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_ic2_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_ic2_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_ic2_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_ic2_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_ic2_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_ic2_FTM_DRV_InitInputCapture -Configures Channel Input Capture for either getting time-stamps on edge detection 
                or on signal measurement . When the edge specified in the captureMode argument occurs on the channel the FTM 
                counter is captured into the CnV register. The user will have to read the CnV register separately to get this 
                value. The filter function is disabled if the filterVal argument passed in is 0. The filter function is 
                available only on channels 0,1,2,3.
   - flexTimer_ic2_FTM_DRV_DeinitInputCapture -Disables input capture mode and clears FTM timer configuration.
   - flexTimer_ic2_FTM_DRV_GetInputCaptureMeasurement -This function is used to calculate the measurement and/or time stamps 
                values which are read from the C(n, n+1)V registers and stored to the static buffers.
   - flexTimer_ic2_FTM_DRV_StartNewSignalMeasurement -Starts new single-shot signal measurement of the given channel.
   - flexTimer_ic2_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_ic2_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "lpTmr1"    (component lptmr)
   - lpTmr1_LPTMR_DRV_InitConfigStruct -Initialize configuration structure.
   - lpTmr1_LPTMR_DRV_Init -Initializes the LPTMR as Timer or Pulse Counter
   - lpTmr1_LPTMR_DRV_SetConfig -Configure a LPTMR instance.
   - lpTmr1_LPTMR_DRV_GetConfig -Get the current configuration of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_Deinit -Deinitializes a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetCompareValueByCount -Change the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_GetCompareValueByCount -Get the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_SetCompareValueByUs -Set the compare value for Timer Mode in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareValueByUs -Get the Compare Value in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareFlag -Get the current state of the Compare Flag (Interrupt Pending)
   - lpTmr1_LPTMR_DRV_ClearCompareFlag -Clear the Compare/Interrupt Pending Flag.
   - lpTmr1_LPTMR_DRV_IsRunning -Get the run state of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetInterrupt -Enable/disable the LPTMR interrupt
   - lpTmr1_LPTMR_DRV_GetCounterValueByCount -Get the current counter value in counter tick units.
   - lpTmr1_LPTMR_DRV_StartCounter -Enable the LPTMR / Start the counter.
   - lpTmr1_LPTMR_DRV_StopCounter -Disable the LPTMR / Stop the counter.
   - lpTmr1_LPTMR_DRV_SetPinConfiguration -Set the Input Pin configuration for Pulse Counter mode.

Module "Cpu"       (component S32K118_48)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
